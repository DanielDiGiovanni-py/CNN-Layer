#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Mar  6 07:15:28 2021

@author: daniel
"""

import requests
from PIL import Image
from io import BytesIO
import numpy as np
import math
import matplotlib.pyplot as plt
import math

def extract_window(image: Image, x: int, y: int, size: int) -> Image:
  """
  Extracts a square window of size w centered at the point (x,y) from image.
  :param image: The image from which to extract a window
  :param x: The x-coordinate of the point at the center of the window.
  :param y: The y-coordinate of the point at the center of the window.
  :param size: The width and height of the window.
  """
  if size<0:
    return None
  img_array = np.array(image)
  height = len(img_array)
  width = len(img_array[0])
  if (size>=width or size>=height):
    return image
  left = x - math.floor(size/2)
  up = y - math.ceil(size/2)
  right = size+left
  down = size+up
  if left<0 or up<0 or right>=width or down>=height:
    return None
    
  # print(left,right,up,down)
  img_array = img_array[up:down,left:right]
  # print(len(img_array))
  return img_array

def conv_window(window: Image, kernel: np.array) -> int:
  """
  Convolves a window with a kernel.
  :param window: The window to convolve
  :param kernel: The kernel with which to convolve the window with
  """
  matrix = np.array(window)
  # print(matrix)
  kernel_size = len(kernel)
  img_y = len(matrix)
  img_x = len(matrix[0])

  img_y = img_y-kernel_size+1
  img_x = img_x-kernel_size+1
  # print(kernel_size, img_x, img_y)
  result = np.zeros((img_y,img_x))

  for i in range(img_y):
    for j in range(img_x):
      result[i][j] = np.sum(matrix[i:i+kernel_size, j:j+kernel_size]*kernel)
  return result

def dilation_conv_window(window: Image, kernel: np.array, dilation_factor: int) -> int:
  """
  Computes the dilated convolution of a window with a kernel.
  :param window: The window to convolve
  :param kernel: The kernel with which to convolve the window with
  :param dilation_factor: The dilation factor
  """
  matrix = np.array(window)
  # print(matrix)
  kernel_size = len(kernel)
  img_y = len(matrix)
  img_x = len(matrix[0])

  inner_matrix_size = kernel_size+(kernel_size-1)*(dilation_factor-1)
  img_y = img_y-inner_matrix_size+1
  img_x = img_x-inner_matrix_size+1
  # print(kernel_size, img_x, img_y)
  result = np.zeros((img_x,img_y))

  y,x=0,0 #pointers to the coordinates in the window
  for i in range(img_y):
    for j in range(img_x):
      temp = 0
      for m in range(kernel_size):
        for n in range(kernel_size):
          temp += kernel[m][n]*matrix[y+m*dilation_factor][x+n*dilation_factor]
      result[i][j] = temp
      x+=1 
    x=0 # reset the start point along the x_axis
    y+=1
  return result

def zero_pad_image(image: Image, pad_size_left_bottom: int, pad_size_top_right: int):
  """
  Adds pads the image `image` by a margin of `pad_size`.
  :param image: The image from which to extract a window
  :param pad_size_left_bottom: The size of the margin to add to the left and bottom margins
  :param pad_size_right_top: The size of the margin to add to the right and top margins
  """
  img_array = np.array(image)
  size = len(img_array)
  length = size + pad_size_left_bottom + pad_size_top_right
  pad_img = np.zeros((length,length))
  pad_img[pad_size_top_right:pad_size_top_right+img_array.shape[0], pad_size_left_bottom:pad_size_left_bottom+img_array.shape[1]] = img_array
  return pad_img

def get_windows(image, window_size):
  """
  Return all square windows centered on every pixel in `image`, of size 
  `window_size`.
  :param image: The image from which to extract all windows
  :param window_size: The size of each window
  """
  
  original_image_size = image.size
  pad_1 = window_size // 2
  pad_2 = window_size - (window_size // 2)
  padded_image = zero_pad_image(image, pad_1, pad_2)

  for x2 in range(original_image_size[1]):
    for x1 in range(original_image_size[0]):
      # the `yield` keyword makes this function a "generator".
      # this allows us to keep the memory use low.
      # you can read more on generators here.
      # https://stackoverflow.com/a/231855
      yield (x1, x2, extract_window(padded_image, x1+pad_1, x2+pad_2, window_size))
      
def convolve_dilation(image: Image, kernel: np.array, dilation: int):
  """
  Returns a convolved image given an image and a kernel. Accepts a dialation 
  factor for dialated convolutions.
  :param image: The image to be convolved.
  :param kernel: The kernel to apply.
  :param dilation: The dilation factor. A value of 1 is a "normal" convolution
  """
  convolved_image = np.zeros((image.size))
  window_set = get_windows(image, 5)

  for x1, x2, window in window_set:
      conv_window = dilation_conv_window(window, kernel, dilation)
      convolved_image[x2,x1] = conv_window
      
  return convolved_image
      
      
# test
r = requests.get("https://dl.sphericalcow.xyz/ecse552/conv_hmwk/mandrill.tiff")
test_image = Image.open(BytesIO(r.content)).convert('L')
# test_image

# img = extract_window(test_image, 256, 256, 150)
# Image.fromarray(img)

k = np.array([[1,0,-1],[2,0,-2],[1,0,-1]])
# w = extract_window(test_image, 256, 256, 3)
# print(conv_window(w, k))

# k = np.array([[1,0,-1],[2,0,-2],[1,0,-1]])
# w = extract_window(test_image, 256, 256, 5)
# print(dilation_conv_window(w, k,2))

# pad_img = zero_pad_image(test_image, 100, 200)
# Image.fromarray(pad_img).convert('L')

# for x1, x2, window in get_windows(test_image, 5):
#   plt.imshow(window, cmap='gray')
#   plt.title(f"5x5 Window centered at ({x1}, {x2})")
#   break

c_img = convolve_dilation(test_image, k, 2)
plt.imshow(c_img)
